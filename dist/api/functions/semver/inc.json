{
  "name": "inc",
  "category": "semver",
  "description": "Increments a version string based on the release type.",
  "author": "theatom06 node-semver",
  "file": "inc.js",
  "minFile": "inc.min.js",

  "source": {
    "github": "https://github.com/theatom06/uno.js/blob/main/lib/semver/inc.js",
    "cdn": "https://cdn.jsdelivr.net/gh/theatom06/uno.js/dist/lib/semver/inc.js",
    "cdnMin": "https://cdn.jsdelivr.net/gh/theatom06/uno.js/dist/lib/semver/inc.min.js"
  },

  "documentation": {
    "markdown": "https://github.com/theatom06/uno.js/blob/main/documentation/semver/inc.md",
    "html": "https://uno.js.org/docs/semver/inc.html"
  },
  
  "params": [[{"name":"version","type":"string","description":"The version string to increment."},{"name":"release","type":"'major'","description":"The type of release to increment."}]],
  "returns": [[{"type":"String","description":"The incremented version string."}]],
  "examples": [["inc('1.2.3', 'major'); // Output: '2.0.0'"]],
  "code": "function semver(version) {\n    let metadata = {\n        version,\n        major: null,\n        minor: null,\n        patch: null,\n        preRelease: null,\n        buildInfo: null,\n        range: '='\n    };\n\n    if (version.includes('+')) [version, metadata.buildInfo] = version.split('+');\n\n    if (version.includes('-')) [version, metadata.preRelease] = version.split('-');\n\n    const parseVersion = (ver) => ver.split('.').map(num => isNaN(Number(num)) ? null : Number(num));\n\n    if (version.startsWith('^')) {\n        metadata.range = '^';\n        version = version.slice(1);\n    } else if (version.startsWith('>=')) {\n        metadata.range = '>=';\n        version = version.slice(2);\n    } else if (version.startsWith('<=')) {\n        metadata.range = '<=';\n        version = version.slice(2);\n    }\n\n    [metadata.major, metadata.minor, metadata.patch] = parseVersion(version);\n\n    return metadata;\n}\n\n/**\n * Increments a version string based on the release type.\n * @param {string} version The version string to increment.\n * @param {'major' | 'minor' | 'patch' } release The type of release to increment.\n * @returns {String} The incremented version string.\n * @example\n * inc('1.2.3', 'major'); // Output: '2.0.0'\n * @author theatom06 node-semver\n */\nexport default function inc(version, release){\n    let v = semver(version);\n    switch(release){\n        case 'major':\n            v.major++;\n            v.minor = 0;\n            v.patch = 0;\n            break;\n        case 'minor':\n            v.minor++;\n            v.patch = 0;\n            break;\n        case 'patch':\n            v.patch++;\n            break;\n        default:\n            throw new Error('Invalid release type');\n    }\n    return `${v.major}.${v.minor}.${v.patch}${v.preRelease ? '-' + v.preRelease : ''}${v.buildInfo ? '+' + v.buildInfo : ''}`;\n}",
  "minCode": "function B(k){let w={version:k,major:null,minor:null,patch:null,preRelease:null,buildInfo:null,range:\"=\"};if(k.includes(\"+\"))[k,w.buildInfo]=k.split(\"+\");if(k.includes(\"-\"))[k,w.preRelease]=k.split(\"-\");let q=(A)=>A.split(\".\").map((z)=>isNaN(Number(z))?null:Number(z));if(k.startsWith(\"^\"))w.range=\"^\",k=k.slice(1);else if(k.startsWith(\">=\"))w.range=\">=\",k=k.slice(2);else if(k.startsWith(\"<=\"))w.range=\"<=\",k=k.slice(2);return[w.major,w.minor,w.patch]=q(k),w}function C(k,w){let q=B(k);switch(w){case\"major\":q.major++,q.minor=0,q.patch=0;break;case\"minor\":q.minor++,q.patch=0;break;case\"patch\":q.patch++;break;default:throw Error(\"Invalid release type\")}return`${q.major}.${q.minor}.${q.patch}${q.preRelease?\"-\"+q.preRelease:\"\"}${q.buildInfo?\"+\"+q.buildInfo:\"\"}`}export{C as default};\n",
  "generated": "2025-10-25T11:38:29.530Z"
}