{
  "name": "semver",
  "category": "semver",
  "description": "Parses a version string and returns metadata about its components.",
  "author": "theatom06 node-semver",
  "file": "semver.js",
  "minFile": "semver.min.js",

  "source": {
    "github": "https://github.com/theatom06/uno.js/blob/main/lib/semver/semver.js",
    "cdn": "https://cdn.jsdelivr.net/gh/theatom06/uno.js/dist/lib/semver/semver.js",
    "cdnMin": "https://cdn.jsdelivr.net/gh/theatom06/uno.js/dist/lib/semver/semver.min.js"
  },

  "documentation": {
    "markdown": "https://github.com/theatom06/uno.js/blob/main/documentation/semver/semver.md",
    "html": "https://uno.js.org/docs/semver/semver.html"
  },
  
  "params": [[{"name":"version","type":"string","description":"The version string to parse."}]],
  "returns": [[{"type":"Semver","description":"An object containing metadata about the version."}]],
  "examples": [["semver('1.2.3-alpha+001'); // Output: { major: 1, minor: 2, patch: 3, preRelease: 'alpha', buildInfo: '001' }"]],
  "code": "/**\n * Parses a version string and returns metadata about its components.\n *\n * @param {string} version - The version string to parse.\n * @example\n * semver('1.2.3-alpha+001'); // Output: { major: 1, minor: 2, patch: 3, preRelease: 'alpha', buildInfo: '001' }\n * @returns {Semver} An object containing metadata about the version.\n * @author theatom06 node-semver\n */\n\nexport default function semver(version) {\n    let metadata = {\n        version,\n        major: null,\n        minor: null,\n        patch: null,\n        preRelease: null,\n        buildInfo: null,\n        range: '='\n    };\n\n    if (version.includes('+')) [version, metadata.buildInfo] = version.split('+');\n\n    if (version.includes('-')) [version, metadata.preRelease] = version.split('-');\n\n    const parseVersion = (ver) => ver.split('.').map(num => isNaN(Number(num)) ? null : Number(num));\n\n    if (version.startsWith('^')) {\n        metadata.range = '^';\n        version = version.slice(1);\n    } else if (version.startsWith('>=')) {\n        metadata.range = '>=';\n        version = version.slice(2);\n    } else if (version.startsWith('<=')) {\n        metadata.range = '<=';\n        version = version.slice(2);\n    }\n\n    [metadata.major, metadata.minor, metadata.patch] = parseVersion(version);\n\n    return metadata;\n}",
  "minCode": "function s(a){let t={version:a,major:null,minor:null,patch:null,preRelease:null,buildInfo:null,range:\"=\"};if(a.includes(\"+\"))[a,t.buildInfo]=a.split(\"+\");if(a.includes(\"-\"))[a,t.preRelease]=a.split(\"-\");let l=(r)=>r.split(\".\").map((e)=>isNaN(Number(e))?null:Number(e));if(a.startsWith(\"^\"))t.range=\"^\",a=a.slice(1);else if(a.startsWith(\">=\"))t.range=\">=\",a=a.slice(2);else if(a.startsWith(\"<=\"))t.range=\"<=\",a=a.slice(2);return[t.major,t.minor,t.patch]=l(a),t}export{s as default};\n",
  "generated": "2025-10-25T11:38:29.682Z"
}