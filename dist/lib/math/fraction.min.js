class z{constructor(j,k=1,q=!0){this.numerator=j,this.denominator=k,this.simplify=q}simplify(){function j(q,w){if(!w)return q;return j(w,q%w)}let k=j(this.numerator,this.denominator);return new z(this.numerator/k,this.denominator/k)}add(j){function k(D,E){function F(G,B){if(!B)return G;return F(B,G%B)}return D*E/F(D,E)}let q=k(this.denominator,j.denominator),w=q/this.denominator,H=q/j.denominator,A=new z(this.numerator*w+j.numerator*H,q);if(A.simplify)return A.simplify();else return A}subtract(j){function k(D,E){function F(G,B){if(!B)return G;return F(B,G%B)}return D*E/F(D,E)}let q=k(this.denominator,j.denominator),w=q/this.denominator,H=q/j.denominator,A=new z(this.numerator*w-j.numerator*H,q);if(A.simplify)return A.simplify();else return A}multiply(j){let k=new z(this.numerator*j.numerator,this.denominator*j.denominator);if(k.simplify)return k.simplify();else return k}divide(j){let k=new z(this.numerator*j.denominator,this.denominator*j.numerator);if(k.simplify)return k.simplify();else return k}toString(){if(this.simplify)return this.simplify().toString();return`${this.numerator}/${this.denominator}`}static fromString(j,k=!0){if(!j.includes("/"))throw Error("Invalid fraction");let[q,w]=j.split("/").map(Number);if(k)return new z(q,w).simplify();return new z(q,w)}}export{z as default};
